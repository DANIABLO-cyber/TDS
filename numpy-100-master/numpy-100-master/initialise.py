##########################################################
# initialise.py
##########################################################

from IPython.display import display, Markdown, HTML, Javascript
import ipywidgets as widgets
import numpy as np
import generators as ge


# =========================
# Funciones "cl√°sicas"
# =========================
def question(n):
    """
    Muestra la pregunta en formato Markdown.
    """
    display(Markdown(f"### ‚ùì Question {n}\n> {ge.QHA[f'q{n}']}"))


def hint(n):
    """
    Muestra la pista en formato Markdown.
    """
    display(Markdown(f"üí° **Hint:** `{ge.QHA[f'h{n}']}`"))


def answer(n):
    """
    Muestra la respuesta en formato Markdown (bloque de c√≥digo).
    """
    display(Markdown(f"‚úÖ **Answer:**\n```python\n{ge.QHA[f'a{n}']}\n```"))


def pick():
    """
    Selecciona una pregunta aleatoria y la muestra con el estilo cl√°sico.
    """
    n = np.random.randint(1, 101)
    question(n)


# =========================
# Funciones Interactivas
# =========================
def spawn_code_cell():
    """
    Inserta din√°micamente una celda de c√≥digo debajo de la actual.
    Funciona √∫nicamente en el Jupyter Notebook cl√°sico.
    """
    display(
        Javascript("""
    if (typeof Jupyter !== "undefined" && Jupyter.notebook) {
        var new_cell = Jupyter.notebook.insert_cell_below('code');
        new_cell.set_text("# Escribe tu respuesta aqu√≠...");
        Jupyter.notebook.select_next();
    } else {
        console.warn("No se detecta el entorno Jupyter Notebook cl√°sico. No se puede crear la celda.");
    }
    """)
    )


def question_interactive(n):
    """
    Muestra la pregunta en Markdown con fondo oscuro,
    y las pistas/respuestas en un Accordion colapsable.
    Al final, inserta una celda de c√≥digo en el Notebook cl√°sico.
    """

    import ipywidgets as widgets
    from IPython.display import display, HTML, Markdown
    import generators as ge

    # --- CSS personalizado para el Accordion oscuro ---
    custom_css = """
    <style>
    /* Ajusta el fondo y el texto en los encabezados y contenido del Accordion */
    .dark-accordion .accordion-header,
    .dark-accordion .accordion-content,
    .dark-accordion .p-Accordion-child {
        background-color: #2c313a !important;
        color: #fff !important;
        border: none !important;
    }
    /* Hover sobre el encabezado del Accordion */
    .dark-accordion .accordion-header:hover {
        background-color: #222 !important;
    }
    </style>
    """
    display(HTML(custom_css))

    # --- Mostramos la pregunta en Markdown (permite LaTeX con $...$) ---
    display(Markdown(f"# ‚ùì Pregunta {n}\n\n{ge.QHA[f'q{n}']}"))

    # --- Creamos los objetos Output para la pista y la soluci√≥n ---
    out_hint = widgets.Output()
    with out_hint:
        display(Markdown(f"{ge.QHA[f'h{n}']}"))

    out_answer = widgets.Output()
    with out_answer:
        display(Markdown(f"```python\n{ge.QHA[f'a{n}']}\n```"))

    # --- Acorde√≥n oscuro con 2 secciones: Pista y Soluci√≥n ---
    accordion = widgets.Accordion(children=[out_hint, out_answer], selected_index=None)
    accordion.set_title(0, "Pista")
    accordion.set_title(1, "Soluci√≥n")

    # A√±adimos la clase "dark-accordion" para aplicar el estilo CSS definido arriba
    accordion.add_class("dark-accordion")

    # --- Mostramos el Accordion ---
    display(accordion)

    # --- Insertamos una celda de Python debajo de la actual (Notebook cl√°sico) ---
    spawn_code_cell()


def pick_interactive():
    """
    Selecciona una pregunta aleatoria y la muestra en formato interactivo.
    """
    n = np.random.randint(1, 4)
    question_interactive(n)
